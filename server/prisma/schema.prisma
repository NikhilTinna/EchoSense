generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String      @id @default(uuid())
  name      String
  username  String      @unique
  email     String      @unique
  password  String
  picture   String?
  bio       String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  UserPost  Post[]      @relation("PostCreator")
  Comment   Comment[]   @relation("CommentCreator")
  Reply     Reply[]     @relation("ReplyCreator")
  Like      Like[]      @relation("UserLike")
  Follower  Following[] @relation("Follower")
  Following Following[] @relation("Following")
}

model Post {
  id           String    @id @default(uuid())
  description  String
  imageurl     String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         User      @relation("PostCreator", fields: [userId], references: [id])
  userId       String
  quotePost    Post?     @relation("QuotedPost", fields: [quotedPostId], references: [id])
  quotedPostId String?
  Post         Post[]    @relation("QuotedPost")
  Comment      Comment[] @relation("PostChild")
  Reply        Reply[]   @relation("PostReply")
  Like         Like[]    @relation("PostLike")
}

model Comment {
  id          String   @id @default(uuid())
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation("CommentCreator", fields: [userId], references: [id])
  userId      String
  post        Post     @relation("PostChild", fields: [postId], references: [id])
  postId      String
  Reply       Reply[]  @relation("CommentReply")
  Like        Like[]   @relation("CommentLike")
}

model Reply {
  id          String   @id @default(uuid())
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation("ReplyCreator", fields: [userId], references: [id])
  userId      String
  post        Post     @relation("PostReply", fields: [postId], references: [id])
  postId      String
  comment     Comment  @relation("CommentReply", fields: [commentId], references: [id])
  commentId   String
  Like        Like[]   @relation("ReplyLike")
}

model Like {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation("UserLike", fields: [userId], references: [id])
  userId    String
  postId    String?
  post      Post?    @relation("PostLike", fields: [postId], references: [id])
  commentId String?
  comment   Comment? @relation("CommentLike", fields: [commentId], references: [id])
  replyId   String?
  reply     Reply?   @relation("ReplyLike", fields: [replyId], references: [id])
}

model Following {
  id          String    @id @default(uuid())
  follower    User   @relation("Follower", fields: [followerId], references: [id])
  followerId  String
  following   User   @relation("Following", fields: [followingId], references: [id])
  followingId String

  
}
